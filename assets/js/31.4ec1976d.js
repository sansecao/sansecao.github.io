(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{416:function(t,s,a){t.exports=a.p+"assets/img/react-life-cycle.99061d89.png"},528:function(t,s,a){"use strict";a.r(s);var e=a(43),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"学习-react-需要注意的点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#学习-react-需要注意的点"}},[t._v("#")]),t._v(" 学习 react 需要注意的点")]),t._v(" "),e("h2",{attrs:{id:"_1-props-的数据不可修改-在当前组件中受到保护"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-props-的数据不可修改-在当前组件中受到保护"}},[t._v("#")]),t._v(" 1. props 的数据不可修改，在当前组件中受到保护")]),t._v(" "),e("p",[t._v("保护单向数据流的设计理念")]),t._v(" "),e("h2",{attrs:{id:"_2-onclick-bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-onclick-bind"}},[t._v("#")]),t._v(" 2. onClick bind")]),t._v(" "),e("p",[e("code",[t._v("onClick = { this.handleClick }")])]),t._v(" "),e("p",[t._v("解决方案两个：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("bind，绑定当前的组件中否则 this 是被调用时候的对象(这里指的是调用当前组件的组件)")])]),t._v(" "),e("li",[e("p",[t._v("把 handleClick 中的 this 穿透到当前(这里指的是当前的组件)中去")])])]),t._v(" "),e("h2",{attrs:{id:"_3-react-的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-的生命周期"}},[t._v("#")]),t._v(" 3. react 的生命周期")]),t._v(" "),e("p",[e("img",{attrs:{src:a(416),alt:"效果图"}})]),t._v(" "),e("p",[t._v("个人感觉 react 的生命周期是简单的")]),t._v(" "),e("h2",{attrs:{id:"_4-setstate-的同步异步问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-setstate-的同步异步问题"}},[t._v("#")]),t._v(" 4. setState 的同步异步问题")]),t._v(" "),e("p",[t._v("疑问：如何让 setState 同步执行")]),t._v(" "),e("p",[t._v("注意：在异步的情况下，第二个参数，也就是回调的使用")]),t._v(" "),e("h2",{attrs:{id:"_5-受控组件和非受控组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-受控组件和非受控组件"}},[t._v("#")]),t._v(" 5. 受控组件和非受控组件")]),t._v(" "),e("p",[t._v("在表单输入中")]),t._v(" "),e("p",[t._v("受控组件：使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。可以理解为表单组件的 value 只能够使用 setState()来控制")]),t._v(" "),e("p",[t._v("非受控组件：可以理解为不与 state 相关联，而是单纯的使用 ref 或者操作 dom 的方式去改变，也可以理解为内容过完全由用去定义，代码不做设置")]),t._v(" "),e("h2",{attrs:{id:"_6-redux-上面的方法和数据获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-redux-上面的方法和数据获取"}},[t._v("#")]),t._v(" 6. redux 上面的方法和数据获取")]),t._v(" "),e("p",[t._v("这只是其中的一种处理方法")]),t._v(" "),e("p",[e("code",[t._v("this.props[methods]")]),t._v(":")]),t._v(" "),e("p",[e("code",[t._v("this.props.currentuser")])]),t._v(" "),e("p",[e("code",[t._v("this.props.fetchCurrentUser()")])]),t._v(" "),e("p",[e("code",[t._v("export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home))")]),t._v("在 router 中调用 redux 的方法。添加属性和方法，以这一种方式导出具体的某一个组件")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapStateToProps")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  currentuser"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("currentuser"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapDispatchToProps")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dispatch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fetchCurrentUser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("payload")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" actionTypes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FETCH_CURRENT_USER")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("h2",{attrs:{id:"_7-如何获取-query-和-params-上面的数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-如何获取-query-和-params-上面的数据"}},[t._v("#")]),t._v(" 7. 如何获取 query 和 params 上面的数据")]),t._v(" "),e("p",[e("code",[t._v("this.props.match.params[prop]")])]),t._v(" "),e("p",[e("code",[t._v("this.props.match.query[prop]")])]),t._v(" "),e("h2",{attrs:{id:"_8-state-的数据改动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-state-的数据改动"}},[t._v("#")]),t._v(" 8. state 的数据改动")]),t._v(" "),e("p",[t._v("state 的改动如果没有动址，则可以直接改动，eg:")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("注意：这种并不会触发生命周期函数中的 componentWillUpdate 的钩子，还是需要 setState 来触发")])]),t._v(" "),e("p",[t._v("如果改变的是值，则需要使用 setState，eg:")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"_9-store-中的-state-的三大原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-store-中的-state-的三大原则"}},[t._v("#")]),t._v(" 9. store 中的 state 的三大原则")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("单一的数据源 --- object tree")])]),t._v(" "),e("li",[e("p",[t._v("state 是只读的 --- 改变 state 的唯一方法就是触发 action")])]),t._v(" "),e("li",[e("p",[t._v("使用纯函数来修改 state --- reducers，改变之后返回给的是 state，而不是相关的业务组件，这个一定要搞清楚")])])]),t._v(" "),e("p",[t._v("补充一点：严格的单向数据流是 Redux 架构的设计核心。")]),t._v(" "),e("h2",{attrs:{id:"_10-action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-action"}},[t._v("#")]),t._v(" 10. Action")]),t._v(" "),e("p",[t._v("Action 是把数据从应用（这里之所以不叫 view 是因为这些数据有可能是服务器响应，用户输入或其它非 view 的数据 ）传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说你会通过 store.dispatch() 将 action 传到 store。")]),t._v(" "),e("h2",{attrs:{id:"_11-reducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-reducer"}},[t._v("#")]),t._v(" 11. Reducer")]),t._v(" "),e("p",[t._v("reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state")]),t._v(" "),e("p",[t._v("为了保持 reducer 的纯洁，注意不要在 reducer 里面做如下的事情：")]),t._v(" "),e("ul",[e("li",[t._v("修改传入参数；")]),t._v(" "),e("li",[t._v("执行有副作用的操作，如 API 请求和路由跳转；")]),t._v(" "),e("li",[t._v("调用非纯函数，如 Date.now() 或 Math.random()。")])]),t._v(" "),e("p",[t._v("目的：只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。")]),t._v(" "),e("h2",{attrs:{id:"_12-使用-redux-saga-一个-react-的中间键-时候的顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-使用-redux-saga-一个-react-的中间键-时候的顺序"}},[t._v("#")]),t._v(" 12. 使用 redux-saga(一个 react 的中间键)时候的顺序")]),t._v(" "),e("p",[t._v("业务 this.props[methods] --\x3e saga 中的 methods(一般是异步的)---\x3e put(相当于 dispatch) ---\x3e reducer ---\x3e store ---\x3e view")]),t._v(" "),e("h2",{attrs:{id:"_13-函数命名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-函数命名"}},[t._v("#")]),t._v(" 13. 函数命名")]),t._v(" "),e("p",[t._v("以前自己写项目还好点，感觉 getData、show、visible 这样的也没什么问题，但是这次看了一个新项目，别人这样命名心里喷死他了，这个也和 vue 和 react 之间的区别有关，vue 中可能一个 vue 文件里面只有一个 showdialog，也只有一次请求数据，所以这种命名还好点，但是在 react 中一个文件那么大，上来一个 getData 这个命名完全没什么意义，和 a 没什么差别，所以以后在写代码的时候不管怎么说，命名一定要语义化")]),t._v(" "),e("h2",{attrs:{id:"_14-组合-vs-继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-组合-vs-继承"}},[t._v("#")]),t._v(" 14. 组合 vs 继承")]),t._v(" "),e("p",[t._v("组合和继承，在 react 的文档中推荐使用组合而非继承来实现组件间的代码重用")]),t._v(" "),e("p",[t._v("包含关系可以理解为 vue 中的插槽的概念")]),t._v(" "),e("p",[t._v("组件可以接受任意 props，包括基本数据类型，React 元素以及函数")]),t._v(" "),e("h2",{attrs:{id:"设计-state-的时候"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计-state-的时候"}},[t._v("#")]),t._v(" 设计 state 的时候")]),t._v(" "),e("p",[t._v("只保留应用所需的可变 state 的最小集合，其他数据均由它们计算产生，就像在 vue 中我们会有一些 computed 属性一样")]),t._v(" "),e("p",[t._v("以下的情况的数据都不应该放在 state 里面：")]),t._v(" "),e("ol",[e("li",[t._v("该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。")]),t._v(" "),e("li",[t._v("该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。")]),t._v(" "),e("li",[t._v("你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。")])]),t._v(" "),e("h2",{attrs:{id:"_15-state-中的值应该如何合理的设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-state-中的值应该如何合理的设计"}},[t._v("#")]),t._v(" 15. state 中的值应该如何合理的设计")]),t._v(" "),e("ol",[e("li",[t._v("找到根据这个 state 进行渲染的所有组件。")]),t._v(" "),e("li",[t._v("找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。")]),t._v(" "),e("li",[t._v("该共同所有者组件或者比它层级更高的组件应该拥有该 state。")]),t._v(" "),e("li",[t._v("如果你找不到一个合适的位置来存放该 state，就可以直接创建一个新的组件来存放该 state，并将这一新组件置于高于共同所有者组件层级的位置。")])]),t._v(" "),e("h2",{attrs:{id:"_16-高阶组件-hoc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-高阶组件-hoc"}},[t._v("#")]),t._v(" 16. 高阶组件(HOC)")]),t._v(" "),e("p",[t._v("HOC 不会修改传入的组件，也不会使用继承来复制其行为。相反，HOC 通过将组件包装在容器组件中来组成新组件。HOC 是纯函数，没有副作用。")]),t._v(" "),e("p",[t._v("注意：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("不要在 render 方法中使用 HOC")])]),t._v(" "),e("li",[e("p",[t._v("务必复制静态方法")])]),t._v(" "),e("li",[e("p",[t._v("Refs 不会被传递")])])]),t._v(" "),e("h2",{attrs:{id:"_17-声明式和命令式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-声明式和命令式"}},[t._v("#")]),t._v(" 17. 声明式和命令式")]),t._v(" "),e("p",[t._v("声明式和命令式是两种编程范式。react 是声明式的，jquery 那样直接操作 dom 是命令式")]),t._v(" "),e("p",[t._v("一般来说，声明式编程关注于发生了啥，而命令式则同时关注于咋发生的")]),t._v(" "),e("p",[t._v("纠正一点自己的想法：")]),t._v(" "),e("p",[t._v("以前总觉得 vue 和 react 一个是声明式的一个是命令式的，其实：vue 和 react 都是声明式的编程，通过操作 model 去改变 view，底层如何实现的 mv 不用去管")]),t._v(" "),e("h2",{attrs:{id:"_18-什么是-hook"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是-hook"}},[t._v("#")]),t._v(" 18. 什么是 Hook")]),t._v(" "),e("p",[t._v("Hook 是能让你在函数组件中“钩入” React 特性的函数。它们名字通常都以 use 开始")]),t._v(" "),e("blockquote",[e("p",[t._v("Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。")])]),t._v(" "),e("h2",{attrs:{id:"_19-usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-usestate"}},[t._v("#")]),t._v(" 19. useState")]),t._v(" "),e("p",[t._v("作用可以相当于 class 中的 state 和 setState")]),t._v(" "),e("h2",{attrs:{id:"_20-useeffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-useeffect"}},[t._v("#")]),t._v(" 20. useEffect")]),t._v(" "),e("p",[t._v("它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途")]),t._v(" "),e("p",[t._v("如果想只调用 componentDidMount")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("在某种条件下进行 update")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("如果想只调用 componentWillUnmount")]),t._v(" "),e("p",[t._v("每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。React 会在组件卸载的时候执行清除操作而不是 componentWillUnmount？")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleStatusChange")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("status")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIsOnline")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isOnline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  ChatAPI"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribeToFriendStatus")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("friend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleStatusChange"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Specify how to clean up after this effect:")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ChatAPI"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsubscribeFromFriendStatus")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("friend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleStatusChange"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("h2",{attrs:{id:"_21-usecontext"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-usecontext"}},[t._v("#")]),t._v(" 21. useContext")]),t._v(" "),e("p",[e("code",[t._v("const value = useContext(MyContext)")])]),t._v(" "),e("p",[t._v("在数据传递过程中使用，如果出入的 MyContext(可能是父组件传递过来的，也可能是 store 里面的数据)发生变化，那么也会导致当前组件的数据更新")]),t._v(" "),e("h2",{attrs:{id:"_22-usecallback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-usecallback"}},[t._v("#")]),t._v(" 22. useCallback")]),t._v(" "),e("p",[t._v("useCallback 的作用在于利用 memoize 减少无效的 re-render，来达到性能优化的作用。还是那句老生常谈的话，“不要过早的性能优化”。从实际开发的经验来看，在做这类性能优化时，一定得观察比较优化的结果，因为某个小角落的 callback 就可能导致优化前功尽弃，甚至是适得其反。")]),t._v(" "),e("h2",{attrs:{id:"_23-useref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-useref"}},[t._v("#")]),t._v(" 23. useRef")]),t._v(" "),e("p",[t._v("通过 ref 拿到相关的数据，ref 的作用相比于 class 的时候作用大了很多")]),t._v(" "),e("h2",{attrs:{id:"_24-如何理解依赖注入-di"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-如何理解依赖注入-di"}},[t._v("#")]),t._v(" 24. 如何理解依赖注入（DI）")]),t._v(" "),e("p",[t._v("?")]),t._v(" "),e("h2",{attrs:{id:"_25-使用过的前端代理的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-使用过的前端代理的方式"}},[t._v("#")]),t._v(" 25. 使用过的前端代理的方式")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("webpack 中的 proxy，添加 jwt 验证的验证规则")])]),t._v(" "),e("li",[e("p",[t._v("使用 node 的模块("),e("code",[t._v("whistle")]),t._v(")+chrome 的插件("),e("code",[t._v("SwitchyOmega")]),t._v(")共同实现")])])]),t._v(" "),e("h2",{attrs:{id:"_26-hook-中的-usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-hook-中的-usestate"}},[t._v("#")]),t._v(" 26. hook 中的 useState")]),t._v(" "),e("p",[t._v("如果 useState 的前后两次不变的话，页面不会更新，所以注意在数组时候的处理，也就是关于拷贝和引用的问题")]),t._v(" "),e("h2",{attrs:{id:"_27-因为使用随机-id-导致的-input-输入时候的焦点莫名的消失"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_27-因为使用随机-id-导致的-input-输入时候的焦点莫名的消失"}},[t._v("#")]),t._v(" 27. 因为使用随机 id 导致的 input 输入时候的焦点莫名的消失")]),t._v(" "),e("p",[t._v("因为数据结构的原因，给 jsx 总的数组 map 生成 dom 的时候添加的 key 是一个用 id 生成器生成的 id，而 dom 的内容是一个自定一个的 form，发现里面的文本输入都只能够输入一次，检查半天，感觉是因为每次 onChange 的时候，重新渲染导致每次的 form 都是一个新的和之前的没有关系了，这一点浪费了我将近半个小时，记录一下")])])}),[],!1,null,null,null);s.default=n.exports}}]);